#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'yaml'
require 'optparse'
require 'yaml_bot'
require 'benchmark'
require 'active_support/core_ext/hash/keys'

banner = <<-eos
I am YamlBot feed me YAML!

eos

options = {}
parser = OptionParser.new do |opts|
  opts.banner = banner
  opts.banner += 'Usage: yamlbot -f yaml_file_to_validate ' \
                 '[-r path_to_rules_file]'

  opts.on('-r', '--rule-file rules',
          'The rules you will be evaluating your yaml against') do |rules|
    options[:rules] = rules
  end

  opts.on('-f', '--file file', 'The file to validate against') do |file|
    options[:file] = file
  end

  opts.on('-h', '--help', 'help') do
    puts parser
    exit
  end
end
parser.parse!

rules_file = ''
yaml_file = ''
if options[:rules].nil?
  unless File.exist?('.yamlbot.yml')
    puts 'Unable to locate .yamlbot.yml file...'
    puts 'Either place a .yamlbot.yml file in the current directory'
    puts 'or specify one with the -r option.'
    exit 1
  end
  rules_file = YAML.load(File.open('.yamlbot.yml')).deep_symbolize_keys
else
  begin
    rules_file = YAML.load(File.open(options[:rules])).deep_symbolize_keys
  rescue StandardError => e
    puts "Unable to locate rules file #{File.basename(options[:rules])}..."
    puts e.message
    puts e.backtrace.inspect
    exit 1
  end
end

begin
  yaml_file = YAML.load(File.open(options[:file])).deep_symbolize_keys
rescue StandardError => e
  puts "Unable to locate yaml file #{File.basename(options[:file])}..."
  puts e.message
  puts e.backtrace.inspect
  exit 1
end

rules_bot = YamlBot::RulesBot.new
rules_bot.rules = rules_file
rules_bot.validate_rules

yaml_bot = YamlBot::ValidationBot.new
yaml_bot.rules = rules_file
yaml_bot.yaml_file = yaml_file

begin
  time = Benchmark.realtime do
    YamlBot::LoggingBot.info 'Beginning scan...'
    yaml_bot.scan
    YamlBot::LoggingBot.info 'Finished scanning...'
  end

  puts '----------------------------------------------'
  puts "Scanning took #{time} seconds"
  if yaml_bot.violations > 0
    YamlBot::LoggingBot.error "#{yaml_bot.violations} violations"
  else
    YamlBot::LoggingBot.info "#{yaml_bot.violations} violations"
  end
ensure
  YamlBot::LoggingBot.close_log
end
